export const artifact: (data: string | {
    path: string;
    type: string;
    name: string;
}, context?: any) => void;
export const log: (...args: any[]) => void;
export const logger: {
    "__#13@#originalUserLogger": {
        assert(condition?: boolean, ...data: any[]): void;
        assert(value: any, message?: string, ...optionalParams: any[]): void;
        clear(): void;
        clear(): void;
        count(label?: string): void;
        count(label?: string): void;
        countReset(label?: string): void;
        countReset(label?: string): void;
        debug(...data: any[]): void;
        debug(message?: any, ...optionalParams: any[]): void;
        dir(item?: any, options?: any): void;
        dir(obj: any, options?: import("util").InspectOptions): void;
        dirxml(...data: any[]): void;
        dirxml(...data: any[]): void;
        error(...data: any[]): void;
        error(message?: any, ...optionalParams: any[]): void;
        group(...data: any[]): void;
        group(...label: any[]): void;
        groupCollapsed(...data: any[]): void;
        groupCollapsed(...label: any[]): void;
        groupEnd(): void;
        groupEnd(): void;
        info(...data: any[]): void;
        info(message?: any, ...optionalParams: any[]): void;
        log(...data: any[]): void;
        log(message?: any, ...optionalParams: any[]): void;
        table(tabularData?: any, properties?: string[]): void;
        table(tabularData: any, properties?: readonly string[]): void;
        time(label?: string): void;
        time(label?: string): void;
        timeEnd(label?: string): void;
        timeEnd(label?: string): void;
        timeLog(label?: string, ...data: any[]): void;
        timeLog(label?: string, ...data: any[]): void;
        timeStamp(label?: string): void;
        timeStamp(label?: string): void;
        trace(...data: any[]): void;
        trace(message?: any, ...optionalParams: any[]): void;
        warn(...data: any[]): void;
        warn(message?: any, ...optionalParams: any[]): void;
        Console: console.ConsoleConstructor;
        profile(label?: string): void;
        profileEnd(label?: string): void;
    };
    "__#13@#userLoggerWithOverridenMethods": any;
    logLevel: string;
    step(strings: any, ...values: any[]): void;
    getLogs(context: string): string[];
    "__#13@#stringifyLogs"(...args: any[]): string;
    _templateLiteralLog(strings: any, ...args: any[]): void;
    "__#13@#logWrapper"(argsArray: any, level: any): void;
    assert(...args: any[]): void;
    debug(...args: any[]): void;
    error(...args: any[]): void;
    info(...args: any[]): void;
    log(...args: any[]): void;
    trace(...args: any[]): void;
    warn(...args: any[]): void;
    intercept(userLogger: any): void;
    stopInterception(): void;
    configure(config?: {
        logLevel?: string;
        prettyObjects?: boolean;
    }): void;
    prettyObjects: boolean;
};
export const meta: (keyValue: {
    [key: string]: string;
} | string, value?: string | null) => void;
export const step: (message: string) => void;
export const label: (key: string, value?: string | null) => void;
export const linkTest: (...testIds: string[]) => void;
export const linkJira: (...jiraIds: string[]) => void;
declare namespace _default {
    let testomatioLogger: {
        "__#13@#originalUserLogger": {
            assert(condition?: boolean, ...data: any[]): void;
            assert(value: any, message?: string, ...optionalParams: any[]): void;
            clear(): void;
            clear(): void;
            count(label?: string): void;
            count(label?: string): void;
            countReset(label?: string): void;
            countReset(label?: string): void;
            debug(...data: any[]): void;
            debug(message?: any, ...optionalParams: any[]): void;
            dir(item?: any, options?: any): void;
            dir(obj: any, options?: import("util").InspectOptions): void;
            dirxml(...data: any[]): void;
            dirxml(...data: any[]): void;
            error(...data: any[]): void;
            error(message?: any, ...optionalParams: any[]): void;
            group(...data: any[]): void;
            group(...label: any[]): void;
            groupCollapsed(...data: any[]): void;
            groupCollapsed(...label: any[]): void;
            groupEnd(): void;
            groupEnd(): void;
            info(...data: any[]): void;
            info(message?: any, ...optionalParams: any[]): void;
            log(...data: any[]): void;
            log(message?: any, ...optionalParams: any[]): void;
            table(tabularData?: any, properties?: string[]): void;
            table(tabularData: any, properties?: readonly string[]): void;
            time(label?: string): void;
            time(label?: string): void;
            timeEnd(label?: string): void;
            timeEnd(label?: string): void;
            timeLog(label?: string, ...data: any[]): void;
            timeLog(label?: string, ...data: any[]): void;
            timeStamp(label?: string): void;
            timeStamp(label?: string): void;
            trace(...data: any[]): void;
            trace(message?: any, ...optionalParams: any[]): void;
            warn(...data: any[]): void;
            warn(message?: any, ...optionalParams: any[]): void;
            Console: console.ConsoleConstructor;
            profile(label?: string): void;
            profileEnd(label?: string): void;
        };
        "__#13@#userLoggerWithOverridenMethods": any;
        logLevel: string;
        step(strings: any, ...values: any[]): void;
        getLogs(context: string): string[];
        "__#13@#stringifyLogs"(...args: any[]): string;
        _templateLiteralLog(strings: any, ...args: any[]): void;
        "__#13@#logWrapper"(argsArray: any, level: any): void;
        assert(...args: any[]): void;
        debug(...args: any[]): void;
        error(...args: any[]): void;
        info(...args: any[]): void;
        log(...args: any[]): void;
        trace(...args: any[]): void;
        warn(...args: any[]): void;
        intercept(userLogger: any): void;
        stopInterception(): void;
        configure(config?: {
            logLevel?: string;
            prettyObjects?: boolean;
        }): void;
        prettyObjects: boolean;
    };
    let artifact: (data: string | {
        path: string;
        type: string;
        name: string;
    }, context?: any) => void;
    let log: (...args: any[]) => void;
    let logger: {
        "__#13@#originalUserLogger": {
            assert(condition?: boolean, ...data: any[]): void;
            assert(value: any, message?: string, ...optionalParams: any[]): void;
            clear(): void;
            clear(): void;
            count(label?: string): void;
            count(label?: string): void;
            countReset(label?: string): void;
            countReset(label?: string): void;
            debug(...data: any[]): void;
            debug(message?: any, ...optionalParams: any[]): void;
            dir(item?: any, options?: any): void;
            dir(obj: any, options?: import("util").InspectOptions): void;
            dirxml(...data: any[]): void;
            dirxml(...data: any[]): void;
            error(...data: any[]): void;
            error(message?: any, ...optionalParams: any[]): void;
            group(...data: any[]): void;
            group(...label: any[]): void;
            groupCollapsed(...data: any[]): void;
            groupCollapsed(...label: any[]): void;
            groupEnd(): void;
            groupEnd(): void;
            info(...data: any[]): void;
            info(message?: any, ...optionalParams: any[]): void;
            log(...data: any[]): void;
            log(message?: any, ...optionalParams: any[]): void;
            table(tabularData?: any, properties?: string[]): void;
            table(tabularData: any, properties?: readonly string[]): void;
            time(label?: string): void;
            time(label?: string): void;
            timeEnd(label?: string): void;
            timeEnd(label?: string): void;
            timeLog(label?: string, ...data: any[]): void;
            timeLog(label?: string, ...data: any[]): void;
            timeStamp(label?: string): void;
            timeStamp(label?: string): void;
            trace(...data: any[]): void;
            trace(message?: any, ...optionalParams: any[]): void;
            warn(...data: any[]): void;
            warn(message?: any, ...optionalParams: any[]): void;
            Console: console.ConsoleConstructor;
            profile(label?: string): void;
            profileEnd(label?: string): void;
        };
        "__#13@#userLoggerWithOverridenMethods": any;
        logLevel: string;
        step(strings: any, ...values: any[]): void;
        getLogs(context: string): string[];
        "__#13@#stringifyLogs"(...args: any[]): string;
        _templateLiteralLog(strings: any, ...args: any[]): void;
        "__#13@#logWrapper"(argsArray: any, level: any): void;
        assert(...args: any[]): void;
        debug(...args: any[]): void;
        error(...args: any[]): void;
        info(...args: any[]): void;
        log(...args: any[]): void;
        trace(...args: any[]): void;
        warn(...args: any[]): void;
        intercept(userLogger: any): void;
        stopInterception(): void;
        configure(config?: {
            logLevel?: string;
            prettyObjects?: boolean;
        }): void;
        prettyObjects: boolean;
    };
    let meta: (keyValue: {
        [key: string]: string;
    } | string, value?: string | null) => void;
    let step: (message: string) => void;
    let label: (key: string, value?: string | null) => void;
    let linkTest: (...testIds: string[]) => void;
    let linkJira: (...jiraIds: string[]) => void;
}
export default _default;
export type ArtifactFunction = typeof import("./reporter-functions.js").default.artifact;
export type LogFunction = typeof import("./reporter-functions.js").default.log;
export type LoggerService = typeof import("./services/index.js").services.logger;
export type MetaFunction = typeof import("./reporter-functions.js").default.keyValue;
export type StepFunction = typeof import("./reporter-functions.js").default.step;
export type LabelFunction = typeof import("./reporter-functions.js").default.label;
